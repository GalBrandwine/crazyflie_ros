<?xml version="1.0"?>
<!--This is suppose to be a Well docomunted .launch file so we could take it as granted when working with other launch files.

A few notes:
    1. When working with traj path's, be sure to set the correct path.
    2.


-->

<launch>
    <!--If working with VRPN (e.g optitrack): -->
    <arg name="server" default="169.254.148.86"/>
    Need to be the same as "Local Interface" in MOTIVE streaming settings. and "Multicast Interface" should be set to
    this leptop IP -
    <arg name="port" default="3883"/>


    <!--    Trajectory's-->
    <arg name="traj1" default="/home/galbra/catkin_ws/src/crazyflie_ros/crazyflie_demo/scripts/takeoff.csv"/>
    <arg name="traj2" default="/home/galbra/catkin_ws/src/crazyflie_ros/crazyflie_demo/scripts/figure8.csv"/>


    <!-- for first CF -->
    <arg name="uri1" default="radio://0/120/2M/E7E7E7E701"/>
    <arg name="frame1" default="cf1"/>
    <arg name="traj_list" default="[$(arg traj1),$(arg traj2)]"/>
    <arg name="initX1" default="0"/>
    <arg name="initY1" default="0"/>
    <arg name="initZ1" default="0"/>


    <!-- for second CF    -->
    <arg name="uri2" default="radio://0/120/2M/E7E7E7E706"/>
    <arg name="frame2" default="cf6"/>
    <arg name="traj_list2" default="[$(arg traj1),$(arg traj2)]"/>
    <arg name="initX2" default="0"/>
    <arg name="initY2" default="0"/>                    <!-- REMEMBER!!!!!!         -->
    <arg name="initZ2" default="0"/>

    <!--run vrpn client -->
<!--    <node pkg="vrpn_client_ros" name="vrpn" output="screen" type="vrpn_client_node" required="true">-->
<!--        <rosparam subst_value="true">-->
<!--            server: $(arg server)-->
<!--            port: $(arg port)-->
<!--            update_frequency: 100.0-->
<!--            frame_id: world-->
<!--            use_server_time: false-->
<!--            broadcast_tf: true-->
<!--            refresh_tracker_frequency: 1.0 &lt;!&ndash; VRPN will add all trackers found on connection &ndash;&gt;-->
<!--        </rosparam>-->
<!--    </node>-->


    <!--    Activate the server.-->
    <include file="$(find crazyflie_driver)/launch/crazyflie_server.launch">
    </include>


    <!--    Set the name space of the CF_x to be its name-->
    <!--    Future develop: instead of : each group is one CF, make each group flock.-->
    <group ns="$(arg frame1)">
        <node pkg="crazyflie_driver" type="crazyflie_add" name="crazyflie_add" output="screen">
            <param name="uri" value="$(arg uri1)"/>
            <param name="tf_prefix" value="$(arg frame1)"/>

            <!--            Logging params:-->
            <param name="enable_logging" value="True"/>
            <param name="enable_logging_temperature" value="False"/>
            <param name="enable_logging_magnetic_field" value="False"/>
            <param name="enable_logging_pressure" value="False"/>
            <param name="enable_logging_imu" value="True"/>
            <param name="enable_logging_battery" value="False"/>

            <rosparam>
                genericLogTopics: ["log_pos" , "log_rpy" , "log_ranges", "log_sensors" ]
                genericLogTopicFrequencies: [20 , 20 , 20 , 20 ]
                genericLogTopic_log_pos_Variables: ["stateEstimate.x", "stateEstimate.y", "stateEstimate.z"]
                genericLogTopic_log_rpy_Variables: ["stabilizer.roll" , "stabilizer.pitch" , "stabilizer.yaw"]
                genericLogTopic_log_ranges_Variables: ["range.front", "range.back", "range.up", "range.left",
                "range.right" , "range.zrange" ]
                genericLogTopic_log_sensors_Variables: ["motion.deltaX" , "motion.deltaY" , "motion.outlierCount" ]
            </rosparam>
        </node>

        <!--            Fix vrpn axes - broadcasts tf frame "cf#_fixed" FOR IT TO WORK THE RIGID BODY NAME MUST BE CF#_VRPN -->

        <node name="explorer" pkg="crazyflie_demo" type="tf_fixer.py" output="screen">
            <param name="tf_prefix" value="$(arg frame1)"/>
        </node>

        <!--        Tf_broadcast a static transform with offset between a drone launch point and world-->
        <node pkg="tf" type="static_transform_publisher" name="world_to_$(arg frame1)_takeoff"
              args="$(arg initX1) $(arg initY1) 0 0 0 0 1 world $(arg frame1)_takeoff 100"/>

        <!--        Tf_broadcast a specific drone with world-->
        <node name="tf_broadcast" pkg="crazyflie_demo" type="tf_broadcaster.py" output="screen">
            <param name="tf_prefix" value="$(arg frame1)"/>
            <param name="initX" value="$(arg initX1)"/>
            <param name="initY" value="$(arg initY1)"/>
            <param name="initZ" value="$(arg initZ1)"/>
        </node>
        <!--        Publish TOF sensors readings as pointcloud-->
        <node name="points_publisher" pkg="crazyflie_demo" type="publish_scan.py" output="screen">
            <param name="tf_prefix" value="$(arg frame1)"/>
        </node>

        <!--        Start keyboard controller. -->
        <node name="keyboard_controller" pkg="crazyflie_demo" type="motion_controller.py" output="screen">
            <param name="tf_prefix" value="$(arg frame1)"/>
        </node>

<!--        &lt;!&ndash;        Cj_injector. &ndash;&gt;-->
<!--        <node name="cj_injection" pkg="crazyflie_demo" type="Cj_injector.py" output="screen">-->
<!--            <param name="tf_prefix" value="$(arg frame1)"/>-->
<!--        </node>-->
        <!--        Rotem.py capture all ros data of a certain CF and wrap it with python object.-->
        <node name="drone_data_parser" pkg="crazyflie_demo" type="rotem.py" output="screen">
            <param name="tf_prefix" value="$(arg frame1)"/>
        </node>

    </group>


    <!--    *************************************************************************************************************-->
<!--    <group ns="$(arg frame2)">-->
<!--        <node pkg="crazyflie_driver" type="crazyflie_add" name="crazyflie_add" output="screen">-->
<!--            <param name="uri" value="$(arg uri2)"/>-->
<!--            <param name="tf_prefix" value="$(arg frame2)"/>-->

<!--            &lt;!&ndash;            Logging params:&ndash;&gt;-->
<!--            <param name="enable_logging" value="True"/>-->
<!--            <param name="enable_logging_temperature" value="False"/>-->
<!--            <param name="enable_logging_magnetic_field" value="False"/>-->
<!--            <param name="enable_logging_pressure" value="False"/>-->
<!--            <param name="enable_logging_imu" value="True"/>-->
<!--            <param name="enable_logging_battery" value="False"/>-->

<!--            <rosparam>-->
<!--                genericLogTopics: ["log_pos" , "log_rpy" , "log_ranges", "log_sensors" ]-->
<!--                genericLogTopicFrequencies: [20 , 20 , 20 , 20 ]-->
<!--                genericLogTopic_log_pos_Variables: ["stateEstimate.x", "stateEstimate.y", "stateEstimate.z"]-->
<!--                genericLogTopic_log_rpy_Variables: ["stabilizer.roll" , "stabilizer.pitch" , "stabilizer.yaw"]-->
<!--                genericLogTopic_log_ranges_Variables: ["range.front", "range.back", "range.up", "range.left",-->
<!--                "range.right" , "range.zrange" ]-->
<!--                genericLogTopic_log_sensors_Variables: ["motion.deltaX" , "motion.deltaY" , "motion.outlierCount" ]-->
<!--            </rosparam>-->
<!--        </node>-->

<!--        &lt;!&ndash;        Fix vrpn axes - broadcasts tf frame "cf#_fixed" FOR IT TO WORK THE RIGID BODY NAME MUST BE CF#_VRPN &ndash;&gt;-->
<!--        <node name="explorer" pkg="crazyflie_demo" type="tf_fixer.py" output="screen">-->
<!--            <param name="tf_prefix" value="$(arg frame2)"/>-->
<!--        </node>-->

<!--        &lt;!&ndash;        Tf_broadcast a static transform with offset between a drone launch point and world&ndash;&gt;-->
<!--        <node pkg="tf" type="static_transform_publisher" name="world_to_$(arg frame2)_takeoff"-->
<!--              args="$(arg initX2) $(arg initY2) 0 0 0 0 1 world $(arg frame2)_takeoff 100"/>-->

<!--        &lt;!&ndash;            The node for actually running desired python code &ndash;&gt;-->
<!--&lt;!&ndash;        <node name="crazyflie_demo_hover" pkg="crazyflie_demo" type="traj_planner.py" output="screen">&ndash;&gt;-->
<!--&lt;!&ndash;            <param name="tf_prefix" value="$(arg frame2)"/>&ndash;&gt;-->
<!--&lt;!&ndash;            &lt;!&ndash;            Pass a list as ros param&ndash;&gt;&ndash;&gt;-->
<!--&lt;!&ndash;            <rosparam param="traj_list" subst_value="True">$(arg traj_list2)</rosparam>&ndash;&gt;-->
<!--&lt;!&ndash;        </node>&ndash;&gt;-->

<!--        &lt;!&ndash;        Start keyboard controller. &ndash;&gt;-->
<!--        <node name="keyboard_controller" pkg="crazyflie_demo" type="motion_controller.py" output="screen">-->
<!--            <param name="tf_prefix" value="$(arg frame2)"/>-->
<!--        </node>-->

<!--        &lt;!&ndash;        Tf_broadcast a specific drone with world&ndash;&gt;-->
<!--        <node name="tf_broadcast" pkg="crazyflie_demo" type="tf_broadcaster.py" output="screen">-->
<!--            <param name="tf_prefix" value="$(arg frame2)"/>-->
<!--            <param name="initX" value="$(arg initX2)"/>-->
<!--            <param name="initY" value="$(arg initY2)"/>-->
<!--            <param name="initZ" value="$(arg initZ2)"/>-->
<!--        </node>-->
<!--        &lt;!&ndash;        Publish TOF sensors readings as pointcloud&ndash;&gt;-->
<!--        <node name="points_publisher" pkg="crazyflie_demo" type="publish_scan.py" output="screen">-->
<!--            <param name="tf_prefix" value="$(arg frame2)"/>-->
<!--        </node>-->
<!--        &lt;!&ndash;        Rotem.py capture all ros data of a certain CF and wrap it with python object.&ndash;&gt;-->
<!--        <node name="drone_data_parser" pkg="crazyflie_demo" type="rotem.py" output="screen">-->
<!--            <param name="tf_prefix" value="$(arg frame2)"/>-->
<!--        </node>-->

<!--        &lt;!&ndash;        logger_by_format.py capture all topics relevant for looging into predesignd SCV.&ndash;&gt;-->
<!--        <node name="logger_by_format" pkg="crazyflie_demo" type="logger_by_format.py" output="screen">-->
<!--            <param name="tf_prefix" value="$(arg frame2)"/>-->
<!--        </node>-->
<!--    </group>-->

</launch>
