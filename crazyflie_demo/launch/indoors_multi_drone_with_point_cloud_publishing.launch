<?xml version="1.0"?>
<!--This is suppose to be a Well docomunted .launch file so we could take it as granted when working with other launch files.

A few notes:
    1. When working with traj path's, be sure to set the correct path.
    2.


-->

<launch>
    <!--If working with VRPN (e.g optitrack): -->
    <arg name="server" default="169.254.148.86"/>
    Need to be the same as "Local Interface" in MOTIVE streaming settings. and "Multicast Interface" should be set to
    this laptop IP -
    <arg name="port" default="3883"/>


    <!--    Trajectory's-->
    <arg name="traj1" default="/home/galbra/catkin_ws/src/crazyflie_ros/crazyflie_demo/scripts/takeoff.csv"/>
    <arg name="traj2" default="/home/galbra/catkin_ws/src/crazyflie_ros/crazyflie_demo/scripts/figure8.csv"/>


<!--        &lt;!&ndash; for first CF - One drone &ndash;&gt;-->
<!--    <arg name="uri1" default="radio://0/120/2M/E7E7E7E704"/>-->
<!--    <arg name="frame1" default="cf4"/>-->
<!--    <arg name="frame1_active" default="1"/>-->
<!--    <arg name="frame1__listening_to_key_board" default="1"/>-->
<!--    <arg name="frame1_start_delay" default="0"/>-->
<!--    <arg name="traj_list" default="[$(arg traj1),$(arg traj2)]"/>-->
<!--    <arg name="initX1" default="0.5334"/>&lt;!&ndash;black farther middle point&ndash;&gt;-->
<!--    <arg name="initY1" default="1.9050"/>&lt;!&ndash;black farther middle point&ndash;&gt;-->
<!--    <arg name="initZ1" default="0"/>-->


    <!-- for first CF -->
    <arg name="uri1" default="radio://0/120/2M/E7E7E7E708"/>
    <arg name="frame1" default="cf8"/>
    <arg name="frame1_active" default="1"/>
    <arg name="frame1__listening_to_key_board" default="1"/>
    <arg name="frame1_start_delay" default="0"/>
    <arg name="traj_list" default="[$(arg traj1),$(arg traj2)]"/>
<!--    <arg name="initX1" default="0.381"/> &lt;!&ndash;red right point&ndash;&gt;-->
<!--    <arg name="initY1" default="0.8382"/> &lt;!&ndash;red right point&ndash;&gt;-->
<!--    <arg name="initX1" default="0.5334"/>&lt;!&ndash;black farther middle point&ndash;&gt;-->
<!--    <arg name="initY1" default="1.9050"/>&lt;!&ndash;black farther middle point&ndash;&gt;-->
    <arg name="initX1" default="0.3048"/><!--black farther left point-->
    <arg name="initY1" default="2.0574"/><!--black farther left point-->
    <arg name="initZ1" default="0"/>


    <!-- for second CF    -->
    <arg name="uri2" default="radio://0/120/2M/E7E7E7E701"/>
    <arg name="frame2" default="cf1"/>
    <arg name="frame2_active" default="1"/>
    <arg name="frame2__listening_to_key_board" default="1"/>
    <arg name="frame2_start_delay" default="10"/>
    <arg name="traj_list2" default="[$(arg traj1),$(arg traj2)]"/>
<!--    <arg name="initX2" default="0.381"/>  &lt;!&ndash;red left point&ndash;&gt;-->
<!--    <arg name="initY2" default="4.115"/>  &lt;!&ndash;red left point&ndash;&gt;-->
<!--    <arg name="initX2" default="0.1524"/>&lt;!&ndash;black farther middle point&ndash;&gt;-->
<!--    <arg name="initY2" default="1.9050"/>&lt;!&ndash;black farther middle point&ndash;&gt;-->
    <arg name="initX2" default="0.0762"/><!--black closer right point-->
    <arg name="initY2" default="1.6764"/><!--black closer right point-->
    <arg name="initZ2" default="0"/>


    <!-- for third CF    -->
    <arg name="uri3" default="radio://0/120/2M/E7E7E7E702"/>
    <arg name="frame3" default="cf2"/>
    <arg name="frame3_active" default="0"/>
    <arg name="frame3__listening_to_key_board" default="1"/>
    <arg name="frame3_start_delay" default="15"/>
    <arg name="traj_list3" default="[$(arg traj1),$(arg traj2)]"/>
    <arg name="initX3" default="0.0762"/><!--black closer right point-->
    <arg name="initY3" default="2.0574"/><!--black closer right point-->
    <arg name="initZ3" default="0"/>


    <!-- for forth CF    -->
    <arg name="uri4" default="radio://0/120/2M/E7E7E7E709"/>
    <arg name="frame4" default="cf9"/>
    <arg name="frame4_active" default="0"/>
    <arg name="traj_list4" default="[$(arg traj1),$(arg traj2)]"/>
    <arg name="initX4" default="0.0"/>
    <arg name="initY4" default="2.4"/>
    <arg name="initZ4" default="0"/>


    <!-- arguments for indoor mapping  -->
    <arg name="x_min" value="0"/>
<!--        <arg name="x_max" default="510"/> &lt;!&ndash; 16.5ft = 5.0292m&ndash;&gt;-->
    <arg name="x_max" default="504"/> <!-- 16.5ft - for resolution 8 -->
    <arg name="y_min" default="0"/>
<!--        <arg name="y_max" default="510"/> &lt;!&ndash; 16.5ft = 5.0292m &ndash;&gt;-->
    <arg name="y_max" default="504"/> <!-- 16.5ft - for resolution 8 -->
    <arg name="env_lim" default="[$(arg x_min), $(arg x_max), $(arg y_min), $(arg y_max)]"/>
    <arg name="resolution" default="8"/>
    <arg name="env_space" default="0"/>
    <arg name="nDrones" default="2"/>
    <arg name="useRefEnv" default="0"/>


    <!-- run rviz -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find crazyflie_demo)/launch/indoors.rviz"
          required="true"/>

<!--  &lt;!&ndash; run bag record &ndash;&gt;-->
<!--    <node pkg="rosbag" type="record" name="rosbag_record_standard_data" respawn="true" output="screen" args="-o /home/PycharmProjects/bags/ -a" />-->

    <!--    teleop_twist_keyboard  -->
    <node name="teleop_twist_keyboard" pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" output="screen"
          launch-prefix="xterm -e"/>


    <!--    VRPN NODE:  -->
    <!--    &lt;!&ndash;run vrpn client &ndash;&gt;-->
    <!--    <node pkg="vrpn_client_ros" name="vrpn" output="screen" type="vrpn_client_node" required="true">-->
    <!--        <rosparam subst_value="true">-->
    <!--            server: $(arg server)-->
    <!--            port: $(arg port)-->
    <!--            update_frequency: 100.0-->
    <!--            frame_id: world-->
    <!--            use_server_time: false-->
    <!--            broadcast_tf: true-->
    <!--            refresh_tracker_frequency: 1.0 &lt;!&ndash; VRPN will add all trackers found on connection &ndash;&gt;-->
    <!--        </rosparam>-->
    <!--    </node>-->


    <!--    Activate the server.-->
    <include file="$(find crazyflie_driver)/launch/crazyflie_server.launch">
    </include>


    <!--    Set the name space of the CF_x to be its name-->
    <!--    Future develop: instead of : each group is one CF, make each group flock.-->
    <!--    ***************************************************** FRAME 1  ********************************************************-->
    <group ns="$(arg frame1)" if="$(eval arg('frame1_active') ==1)">
        <node pkg="crazyflie_driver" type="crazyflie_add" name="crazyflie_add" output="screen">
            <param name="uri" value="$(arg uri1)"/>
            <param name="tf_prefix" value="$(arg frame1)"/>

            <!--            Logging params:-->
            <param name="enable_logging" value="True"/>
            <param name="enable_logging_temperature" value="False"/>
            <param name="enable_logging_magnetic_field" value="False"/>
            <param name="enable_logging_pressure" value="False"/>
            <param name="enable_logging_imu" value="True"/>
            <param name="enable_logging_battery" value="False"/>

            <rosparam>
                genericLogTopics: ["log_pos" , "log_rpy" , "log_ranges", "log_sensors" ]
                genericLogTopicFrequencies: [20 , 20 , 20 , 20 ]
                genericLogTopic_log_pos_Variables: ["stateEstimate.x", "stateEstimate.y", "stateEstimate.z"]
                genericLogTopic_log_rpy_Variables: ["stabilizer.roll" , "stabilizer.pitch" , "stabilizer.yaw"]
                genericLogTopic_log_ranges_Variables: ["range.front", "range.back", "range.up", "range.left",
                "range.right" , "range.zrange" ]
                genericLogTopic_log_sensors_Variables: ["motion.deltaX" , "motion.deltaY" , "motion.outlierCount" ]
            </rosparam>
        </node>


        <!--            Fix vrpn axes - broadcasts tf frame "cf#_fixed" FOR IT TO WORK THE RIGID BODY NAME MUST BE CF#_VRPN -->
        <node name="explorer" pkg="crazyflie_demo" type="tf_fixer.py" output="screen">
            <param name="tf_prefix" value="$(arg frame1)"/>
        </node>

        <!--        Tf_broadcast a static transform with offset between a drone launch point and world-->
        <node pkg="tf" type="static_transform_publisher" name="world_to_$(arg frame1)_takeoff"
              args="$(arg initX1) $(arg initY1) 0 0 0 0 1 world $(arg frame1)_takeoff 100"/>
        <!--        Tf_broadcast a specific drone with world-->
        <node name="tf_broadcast" pkg="crazyflie_demo" type="tf_broadcaster.py" output="screen">
            <param name="tf_prefix" value="$(arg frame1)"/>
            <param name="initX" value="$(arg initX1)"/>
            <param name="initY" value="$(arg initY1)"/>
            <param name="initZ" value="$(arg initZ1)"/>
        </node>


        <!--        &lt;!&ndash;            The node for actually running desired python code &ndash;&gt;-->
        <!--                <node name="crazyflie_demo_hover" pkg="crazyflie_demo" type="traj_planner.py" output="screen">-->
        <!--                    <param name="tf_prefix" value="$(arg frame1)"/>-->
        <!--                    &lt;!&ndash;            Pass a 'list' as ros param&ndash;&gt;-->
        <!--                    <rosparam param="traj_list" subst_value="True">$(arg traj_list)</rosparam>-->
        <!--                </node>-->

        <!--        Start keyboard controller. -->
        <node name="motion_controller" pkg="crazyflie_demo" type="motion_controller.py" output="screen">
            <param name="tf_prefix" value="$(arg frame1)"/>
            <param name="listen_to_keyboard" value="$(arg frame1__listening_to_key_board)"/>
            <param name="start_delay" value="$(arg frame1_start_delay)"/>
        </node>

        <!--        Publish TOF sensors readings as pointcloud-->
        <node name="points_publisher" pkg="crazyflie_demo" type="publish_scan.py" output="screen">
            <param name="tf_prefix" value="$(arg frame1)"/>
        </node>

        <!--        logger_by_format.py capture all topics relevant for looging into predesignd SCV.-->
        <node name="logger_by_format" pkg="crazyflie_demo" type="logger_by_format.py" output="screen">
            <param name="tf_prefix" value="$(arg frame1)"/>
        </node>
    </group>


    <!--    ***************************************************** FRAME 2 ********************************************************-->
    <group ns="$(arg frame2)" if="$(eval arg('frame2_active') ==1)">
        <node pkg="crazyflie_driver" type="crazyflie_add" name="crazyflie_add" output="screen">
            <param name="uri" value="$(arg uri2)"/>
            <param name="tf_prefix" value="$(arg frame2)"/>

            <!--            Logging params:-->
            <param name="enable_logging" value="True"/>
            <param name="enable_logging_temperature" value="False"/>
            <param name="enable_logging_magnetic_field" value="False"/>
            <param name="enable_logging_pressure" value="False"/>
            <param name="enable_logging_imu" value="True"/>
            <param name="enable_logging_battery" value="False"/>

            <rosparam>
                genericLogTopics: ["log_pos" , "log_rpy" , "log_ranges", "log_sensors" ]
                genericLogTopicFrequencies: [20 , 20 , 20 , 20 ]
                genericLogTopic_log_pos_Variables: ["stateEstimate.x", "stateEstimate.y", "stateEstimate.z"]
                genericLogTopic_log_rpy_Variables: ["stabilizer.roll" , "stabilizer.pitch" , "stabilizer.yaw"]
                genericLogTopic_log_ranges_Variables: ["range.front", "range.back", "range.up", "range.left",
                "range.right" , "range.zrange" ]
                genericLogTopic_log_sensors_Variables: ["motion.deltaX" , "motion.deltaY" , "motion.outlierCount" ]
            </rosparam>
        </node>

        <!--        Fix vrpn axes - broadcasts tf frame "cf#_fixed" FOR IT TO WORK THE RIGID BODY NAME MUST BE CF#_VRPN -->
        <node name="explorer" pkg="crazyflie_demo" type="tf_fixer.py" output="screen">
            <param name="tf_prefix" value="$(arg frame2)"/>
        </node>

        <!--        Tf_broadcast a static transform with offset between a drone launch point and world-->
        <node pkg="tf" type="static_transform_publisher" name="world_to_$(arg frame2)_takeoff"
              args="$(arg initX2) $(arg initY2) 0 0 0 0 1 world $(arg frame2)_takeoff 100"/>

        <!--            The node for actually running desired python code -->

        <!--        If trajectory usage is desired: -->
        <!--        <node name="crazyflie_demo_hover" pkg="crazyflie_demo" type="traj_planner.py" output="screen">-->
        <!--            <param name="tf_prefix" value="$(arg frame2)"/>-->
        <!--            &lt;!&ndash;            Pass a list as ros param&ndash;&gt;-->
        <!--            <rosparam param="traj_list" subst_value="True">$(arg traj_list2)</rosparam>-->
        <!--        </node>-->

        <!--        Start keyboard controller. -->
        <node name="motion_controller" pkg="crazyflie_demo" type="motion_controller.py" output="screen">
            <param name="tf_prefix" value="$(arg frame2)"/>
            <param name="listen_to_keyboard" value="$(arg frame2__listening_to_key_board)"/>
            <param name="start_delay" value="$(arg frame2_start_delay)"/>
        </node>

        <!--        Tf_broadcast a specific drone with world-->
        <node name="tf_broadcast" pkg="crazyflie_demo" type="tf_broadcaster.py" output="screen">
            <param name="tf_prefix" value="$(arg frame2)"/>
            <param name="initX" value="$(arg initX2)"/>
            <param name="initY" value="$(arg initY2)"/>
            <param name="initZ" value="$(arg initZ2)"/>
        </node>
        <!--        Publish TOF sensors readings as pointcloud-->
        <node name="points_publisher" pkg="crazyflie_demo" type="publish_scan.py" output="screen">
            <param name="tf_prefix" value="$(arg frame2)"/>
        </node>

        <!--        logger_by_format.py capture all topics relevant for looging into predesignd SCV.-->
        <node name="logger_by_format" pkg="crazyflie_demo" type="logger_by_format.py" output="screen">
            <param name="tf_prefix" value="$(arg frame2)"/>
        </node>
    </group>

    <!--    ***************************************************** FRAME 3 ********************************************************-->
    <group ns="$(arg frame3)" if="$(eval arg('frame3_active') ==1)">
        <node pkg="crazyflie_driver" type="crazyflie_add" name="crazyflie_add" output="screen">
            <param name="uri" value="$(arg uri3)"/>
            <param name="tf_prefix" value="$(arg frame3)"/>

            <!--            Logging params:-->
            <param name="enable_logging" value="True"/>
            <param name="enable_logging_temperature" value="False"/>
            <param name="enable_logging_magnetic_field" value="False"/>
            <param name="enable_logging_pressure" value="False"/>
            <param name="enable_logging_imu" value="True"/>
            <param name="enable_logging_battery" value="False"/>

            <rosparam>
                genericLogTopics: ["log_pos" , "log_rpy" , "log_ranges", "log_sensors" ]
                genericLogTopicFrequencies: [20 , 20 , 20 , 20 ]
                genericLogTopic_log_pos_Variables: ["stateEstimate.x", "stateEstimate.y", "stateEstimate.z"]
                genericLogTopic_log_rpy_Variables: ["stabilizer.roll" , "stabilizer.pitch" , "stabilizer.yaw"]
                genericLogTopic_log_ranges_Variables: ["range.front", "range.back", "range.up", "range.left",
                "range.right" , "range.zrange" ]
                genericLogTopic_log_sensors_Variables: ["motion.deltaX" , "motion.deltaY" , "motion.outlierCount" ]
            </rosparam>
        </node>

        <!--        Fix vrpn axes - broadcasts tf frame "cf#_fixed" FOR IT TO WORK THE RIGID BODY NAME MUST BE CF#_VRPN -->
        <node name="explorer" pkg="crazyflie_demo" type="tf_fixer.py" output="screen">
            <param name="tf_prefix" value="$(arg frame3)"/>
        </node>

        <!--        Tf_broadcast a static transform with offset between a drone launch point and world-->
        <node pkg="tf" type="static_transform_publisher" name="world_to_$(arg frame3)_takeoff"
              args="$(arg initX3) $(arg initY3) 0 0 0 0 1 world $(arg frame3)_takeoff 100"/>

        <!--            The node for actually running desired python code -->

        <!--        If trajectory usage is desired: -->
        <!--        <node name="crazyflie_demo_hover" pkg="crazyflie_demo" type="traj_planner.py" output="screen">-->
        <!--            <param name="tf_prefix" value="$(arg frame3)"/>-->
        <!--            &lt;!&ndash;            Pass a list as ros param&ndash;&gt;-->
        <!--            <rosparam param="traj_list" subst_value="True">$(arg traj_list3)</rosparam>-->
        <!--        </node>-->

        <!--        Start keyboard controller. -->
        <node name="motion_controller" pkg="crazyflie_demo" type="motion_controller.py" output="screen">
            <param name="tf_prefix" value="$(arg frame3)"/>
            <param name="listen_to_keyboard" value="$(arg frame3__listening_to_key_board)"/>
            <param name="start_delay" value="$(arg frame3_start_delay)"/>
        </node>

        <!--        Tf_broadcast a specific drone with world-->
        <node name="tf_broadcast" pkg="crazyflie_demo" type="tf_broadcaster.py" output="screen">
            <param name="tf_prefix" value="$(arg frame3)"/>
            <param name="initX" value="$(arg initX3)"/>
            <param name="initY" value="$(arg initY3)"/>
            <param name="initZ" value="$(arg initZ3)"/>
        </node>
        <!--        Publish TOF sensors readings as pointcloud-->
        <node name="points_publisher" pkg="crazyflie_demo" type="publish_scan.py" output="screen">
            <param name="tf_prefix" value="$(arg frame3)"/>
        </node>

        <!--        logger_by_format.py capture all topics relevant for looging into predesignd SCV.-->
        <node name="logger_by_format" pkg="crazyflie_demo" type="logger_by_format.py" output="screen">
            <param name="tf_prefix" value="$(arg frame3)"/>
        </node>
    </group>

    <!--    ***************************************************** FRAME 4 *******************************************************-->
    <group ns="$(arg frame4)" if="$(eval arg('frame4_active') ==1)">
        <node pkg="crazyflie_driver" type="crazyflie_add" name="crazyflie_add" output="screen">
            <param name="uri" value="$(arg uri4)"/>
            <param name="tf_prefix" value="$(arg frame4)"/>

            <!--            Logging params:-->
            <param name="enable_logging" value="True"/>
            <param name="enable_logging_temperature" value="False"/>
            <param name="enable_logging_magnetic_field" value="False"/>
            <param name="enable_logging_pressure" value="False"/>
            <param name="enable_logging_imu" value="True"/>
            <param name="enable_logging_battery" value="False"/>

            <rosparam>
                genericLogTopics: ["log_pos" , "log_rpy" , "log_ranges", "log_sensors" ]
                genericLogTopicFrequencies: [20 , 20 , 20 , 20 ]
                genericLogTopic_log_pos_Variables: ["stateEstimate.x", "stateEstimate.y", "stateEstimate.z"]
                genericLogTopic_log_rpy_Variables: ["stabilizer.roll" , "stabilizer.pitch" , "stabilizer.yaw"]
                genericLogTopic_log_ranges_Variables: ["range.front", "range.back", "range.up", "range.left",
                "range.right" , "range.zrange" ]
                genericLogTopic_log_sensors_Variables: ["motion.deltaX" , "motion.deltaY" , "motion.outlierCount" ]
            </rosparam>
        </node>

        <!--        Fix vrpn axes - broadcasts tf frame "cf#_fixed" FOR IT TO WORK THE RIGID BODY NAME MUST BE CF#_VRPN -->
        <node name="explorer" pkg="crazyflie_demo" type="tf_fixer.py" output="screen">
            <param name="tf_prefix" value="$(arg frame4)"/>
        </node>

        <!--        Tf_broadcast a static transform with offset between a drone launch point and world-->
        <node pkg="tf" type="static_transform_publisher" name="world_to_$(arg frame4)_takeoff"
              args="$(arg initX4) $(arg initY4) 0 0 0 0 1 world $(arg frame4)_takeoff 100"/>

        <!--            The node for actually running desired python code -->

        <!--        If trajectory usage is desired: -->
        <!--        <node name="crazyflie_demo_hover" pkg="crazyflie_demo" type="traj_planner.py" output="screen">-->
        <!--            <param name="tf_prefix" value="$(arg frame2)"/>-->
        <!--            &lt;!&ndash;            Pass a list as ros param&ndash;&gt;-->
        <!--            <rosparam param="traj_list" subst_value="True">$(arg traj_list2)</rosparam>-->
        <!--        </node>-->

        <!--        Start keyboard controller. -->
        <node name="motion_controller" pkg="crazyflie_demo" type="motion_controller.py" output="screen">
            <param name="tf_prefix" value="$(arg frame4)"/>
        </node>

        <!--        Tf_broadcast a specific drone with world-->
        <node name="tf_broadcast" pkg="crazyflie_demo" type="tf_broadcaster.py" output="screen">
            <param name="tf_prefix" value="$(arg frame4)"/>
            <param name="initX" value="$(arg initX4)"/>
            <param name="initY" value="$(arg initY4)"/>
            <param name="initZ" value="$(arg initZ4)"/>
        </node>
        <!--        Publish TOF sensors readings as pointcloud-->
        <node name="points_publisher" pkg="crazyflie_demo" type="publish_scan.py" output="screen">
            <param name="tf_prefix" value="$(arg frame4)"/>
        </node>

        <!--        logger_by_format.py capture all topics relevant for looging into predesignd SCV.-->
        <node name="logger_by_format" pkg="crazyflie_demo" type="logger_by_format.py" output="screen">
            <param name="tf_prefix" value="$(arg frame4)"/>
        </node>
    </group>

    <!--    ***************************************************** MAPPING modules *******************************************************-->
    <group ns="Mapping">
        <node name="grid_publisher" pkg="crazyflie_demo" type="Grid.py" output="screen">
            <param name="env_lim" value="$(arg env_lim)"/>
            <param name="env_space" value="$(arg env_space)"/>
            <param name="resolution" value="$(arg resolution)"/>
            <param name="useRefEnv" value="$(arg useRefEnv)"/>
            <param name="excelPath" value="$(find crazyflie_demo)/resources/MazeMap.csv"/>
            <param name="nDrones" value="$(arg nDrones)"/>
            <param name="drone_name_0" value="$(arg frame1)"/>
            <param name="drone_takeoff_position_0" value="[$(arg initX1), $(arg initY1), $(arg initZ1)]"/>
            <param name="drone_name_1" value="$(arg frame2)"/>
            <param name="drone_takeoff_position_1" value="[$(arg initX2), $(arg initY2), $(arg initZ2)]"/>
            <param name="drone_name_2" value="$(arg frame3)"/>
            <param name="drone_takeoff_position_2" value="[$(arg initX3), $(arg initY3), $(arg initZ3)]"/>

        </node>

        <node name="display_manager" pkg="crazyflie_demo" type="Display.py" output="screen">
            <param name="env_lim" value="$(arg env_lim)"/>
            <param name="env_space" value="$(arg env_space)"/>
            <param name="resolution" value="$(arg resolution)"/>
            <param name="nDrones" value="$(arg nDrones)"/>
            <param name="drone_name_0" value="$(arg frame1)"/>
            <param name="drone_takeoff_position_0" value="[$(arg initX1), $(arg initY1), $(arg initZ1)]"/>
            <param name="drone_name_1" value="$(arg frame2)"/>
            <param name="drone_takeoff_position_1" value="[$(arg initX2), $(arg initY2), $(arg initZ2)]"/>
            <param name="drone_name_2" value="$(arg frame3)"/>
            <param name="drone_takeoff_position_2" value="[$(arg initX3), $(arg initY3), $(arg initZ3)]"/>

        </node>

        <!--    Cf's arary. for Cj_injector   input is an array of drones!
                Future develop: add drone as a message!
                INPUT: ,$(arg frame2),$(arg frame3),$(arg frame4)    -->

        <node name="Cj_injector" pkg="crazyflie_demo" type="Cj_injector.py" output="screen">
            <!--            <param name="env_lim" value="$(arg env_lim)"/>-->
            <rosparam param="env_lim" subst_value="True">[$(arg env_lim),]</rosparam>
            <param name="resolution" value="$(arg resolution)"/>
<!--            <rosparam param="resolution" subst_value="True">[$(arg resolution)]</rosparam>-->
<!--            <param name="prefix_list" value="[$(arg frame1), $(arg frame2), $(arg frame3),$(arg frame4)]"/>-->
<!--            <param name="prefix_list" value="[$(arg frame1)]"/>-->
            <rosparam param="prefix_list" subst_value="True">[[$(arg frame1)], [$(arg frame2)], [$(arg frame3)],]</rosparam>
            <!--            Pass all drones initial takeoff positions-->
            <!--            <param name="init_takeoff_list" value="[[$(arg initX1), $(arg initY1), $(arg initZ1)]] "/>-->
            <rosparam param="init_takeoff_list" subst_value="True">[[$(arg initX1), $(arg initY1), $(arg initZ1)],
                [$(arg initX2), $(arg initY2), $(arg initZ2)],
                [$(arg initX3), $(arg initY3), $(arg initZ3)],]</rosparam>
            <param name="env_space" value="$(arg env_space)"/>
            <!--            <rosparam param="env_space" subst_value="True">[$(arg env_space)]</rosparam>-->
            <param name="nDrones" value="$(arg nDrones)"/>
        </node>

<!--        <node name="http_server" pkg="crazyflie_demo" type="HTTP_server.py" output="screen">-->
<!--            <param name="nDrones" value="$(arg nDrones)"/>-->
<!--            <param name="drone_name_0" value="$(arg frame1)"/>-->
<!--            <param name="drone_name_1" value="$(arg frame2)"/>-->
<!--            <param name="env_lim" value="$(arg env_lim)"/>-->
<!--            <param name="env_space" value="$(arg env_space)"/>-->
<!--            <param name="resolution" value="$(arg resolution)"/>-->
<!--            <param name="vehicle_start_pos" value="[0.33, 1.91]" />-->
<!--            <param name="vehicle_recorded_path" value="$(find crazyflie_demo)/resources/vehicle_recorded_path.txt"/>-->
<!--        </node>-->

    </group>

</launch>
